Aquí tienes un ejemplo de cómo crear las vistas de creación y edición para la clase `Impresora` utilizando DropDownList en cascada para las tablas de Marca, Modelo e Impresora. Este ejemplo utiliza Entity Framework Core para el acceso a datos y ASP.NET Core MVC en C# y código cshtml para las vistas.

```csharp
// Controlador
public class ImpresoraController : Controller
{
    private readonly ApplicationDbContext _context;

    public ImpresoraController(ApplicationDbContext context)
    {
        _context = context;
    }

    // Acción para mostrar el formulario de creación
    public IActionResult Create()
    {
        ViewBag.Marcas = new SelectList(_context.Marcas, "Id", "Nombre");
        ViewBag.Modelos = new SelectList(Enumerable.Empty<SelectListItem>());
        ViewBag.Estados = new SelectList(_context.Estados, "Id", "Nombre");
        return View();
    }

    // Acción para procesar el formulario de creación
    [HttpPost]
    public IActionResult Create(Impresora impresora)
    {
        if (ModelState.IsValid)
        {
            _context.Impresoras.Add(impresora);
            _context.SaveChanges();
            return RedirectToAction("Index");
        }

        ViewBag.Marcas = new SelectList(_context.Marcas, "Id", "Nombre", impresora.MarcaId);
        ViewBag.Modelos = new SelectList(_context.Modelos.Where(m => m.MarcaId == impresora.MarcaId), "Id", "Nombre", impresora.ModeloId);
        ViewBag.Estados = new SelectList(_context.Estados, "Id", "Nombre", impresora.EstadoId);
        return View(impresora);
    }

    // Acción para mostrar el formulario de edición
    public IActionResult Edit(int id)
    {
        var impresora = _context.Impresoras.Find(id);
        if (impresora == null)
        {
            return NotFound();
        }

        ViewBag.Marcas = new SelectList(_context.Marcas, "Id", "Nombre", impresora.MarcaId);
        ViewBag.Modelos = new SelectList(_context.Modelos.Where(m => m.MarcaId == impresora.MarcaId), "Id", "Nombre", impresora.ModeloId);
        ViewBag.Estados = new SelectList(_context.Estados, "Id", "Nombre", impresora.EstadoId);
        return View(impresora);
    }

    // Acción para procesar el formulario de edición
    [HttpPost]
    public IActionResult Edit(int id, Impresora impresora)
    {
        if (id != impresora.Id)
        {
            return BadRequest();
        }

        if (ModelState.IsValid)
        {
            _context.Entry(impresora).State = EntityState.Modified;
            _context.SaveChanges();
            return RedirectToAction("Index");
        }

        ViewBag.Marcas = new SelectList(_context.Marcas, "Id", "Nombre", impresora.MarcaId);
        ViewBag.Modelos = new SelectList(_context.Modelos.Where(m => m.MarcaId == impresora.MarcaId), "Id", "Nombre", impresora.ModeloId);
        ViewBag.Estados = new SelectList(_context.Estados, "Id", "Nombre", impresora.EstadoId);
        return View(impresora);
    }

    // Acción para obtener los modelos por marca
    public JsonResult GetModelos(int marcaId)
    {
        var modelos = _context.Modelos.Where(m => m.MarcaId == marcaId).ToList();
        return Json(new SelectList(modelos, "Id", "Nombre"));
    }
}

// Vista de creación
@model Impresora

@{
    ViewData["Title"] = "Crear Impresora";
}

<h1>Crear Impresora</h1>

<form asp-action="Create" method="post">
    <div>
        <label asp-for="CodigoActivoFijo">No. Activo Fijo:</label>
        <input asp-for="CodigoActivoFijo" />
        <span asp-validation-for="CodigoActivoFijo"></span>
    </div>
    <div>
        <label asp-for="MarcaId">Marca:</label>
        <select asp-for="MarcaId" asp-items="ViewBag.Marcas"></select>
        <span asp-validation-for="MarcaId"></span>
    </div>
    <div>
        <label asp-for="ModeloId">Modelo:</label>
        <select asp-for="ModeloId" asp-items="ViewBag.Modelos"></select>
        <span asp-validation-for="ModeloId"></span>
    </div>
    <div>
        <label asp-for="EstadoId">Estado:</label>
        <select asp-for="EstadoId" asp-items="ViewBag.Estados"></select>
        <span asp-validation-for="EstadoId"></span>
    </div>
    <div>
        <label asp-for="DireccionIP">IP:</label>
        <input asp-for="DireccionIP" />
        <span asp-validation-for="DireccionIP"></span>
    </div>
    <button type="submit">Crear</button>
</form>

@section Scripts {
    @{ await Html.RenderPartialAsync("_ValidationScriptsPartial"); }

<!------------------------------------------------------------------------------------------------------->
Para actualizar o eliminar datos en la base de datos utilizando Entity Framework Core, puedes utilizar los métodos `Update` y `Remove` del `DbSet` correspondiente y luego llamar al método `SaveChanges` del contexto de la base de datos. Aquí tienes un ejemplo de cómo hacerlo:

```csharp
// Controlador
public class ImpresoraController : Controller
{
    private readonly ApplicationDbContext _context;

    public ImpresoraController(ApplicationDbContext context)
    {
        _context = context;
    }

    // Acción para mostrar el formulario de edición
    public IActionResult Edit(int id)
    {
        var impresora = _context.Impresoras.Find(id);
        if (impresora == null)
        {
            return NotFound();
        }

        ViewBag.Marcas = new SelectList(_context.Marcas, "Id", "Nombre", impresora.MarcaId);
        ViewBag.Modelos = new SelectList(_context.Modelos.Where(m => m.MarcaId == impresora.MarcaId), "Id", "Nombre", impresora.ModeloId);
        ViewBag.Estados = new SelectList(_context.Estados, "Id", "Nombre", impresora.EstadoId);
        return View(impresora);
    }

    // Acción para procesar el formulario de edición
    [HttpPost]
    public IActionResult Edit(int id, Impresora impresora)
    {
        if (id != impresora.Id)
        {
            return BadRequest();
        }

        if (ModelState.IsValid)
        {
            _context.Entry(impresora).State = EntityState.Modified;
            _context.SaveChanges();
            return RedirectToAction("Index");
        }

        ViewBag.Marcas = new SelectList(_context.Marcas, "Id", "Nombre", impresora.MarcaId);
        ViewBag.Modelos = new SelectList(_context.Modelos.Where(m => m.MarcaId == impresora.MarcaId), "Id", "Nombre", impresora.ModeloId);
        ViewBag.Estados = new SelectList(_context.Estados, "Id", "Nombre", impresora.EstadoId);
        return View(impresora);
    }

    // Acción para eliminar una impresora
    public IActionResult Delete(int id)
    {
        var impresora = _context.Impresoras.Find(id);
        if (impresora == null)
        {
            return NotFound();
        }

        _context.Impresoras.Remove(impresora);
        _context.SaveChanges();
        return RedirectToAction("Index");
    }
}
```

Este código muestra cómo utilizar el método `Update` del `DbSet` correspondiente para actualizar un objeto en la base de datos y cómo utilizar el método `Remove` del `DbSet` correspondiente para eliminar un objeto de la base de datos. Luego se llama al método `SaveChanges` del contexto de la base de datos para guardar los cambios.

Espero que este ejemplo te sea útil. ¿Necesitas más ayuda o información sobre algún aspecto en particular?

